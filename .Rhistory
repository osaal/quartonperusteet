if (grepl("^\\s*$", el)) {
quoted_lines <- quoted_lines[!(names(quoted_lines) %in% el)]
}
# Drop lines that end in a colon (indicating a nested map)
if (grepl(".*:$", el)) {
quoted_lines <- quoted_lines[!(names(quoted_lines) %in% el)]
}
}
# Remove names to clean up vector
names(quoted_lines) <- NULL
# Function to recursively convert parsed YAML list elements from vectors to lists
convert_to_list <- function(parsed_data) {
for (i in seq_along(parsed_data)) {
el <- parsed_data[[i]]
if (is.list(el)) {
# Recurse deeper
parsed_data[[i]] <- convert_to_list(el)
} else if (length(el) > 1) {
# Not a list, but has length more than one element == vector
parsed_data[[i]] <- as.list(parsed_data[[i]])
}
# In other cases, continue looping
}
}
parsed_data <- yaml::yaml.load(lines)
parsed_data <- convert_to_list(parsed_data)
convert_to_list <- function(parsed_data) {
print("Function start")
for (i in seq_along(parsed_data)) {
print(paste("Access element:", i))
el <- parsed_data[[i]]
if (is.list(el)) {
# Recurse deeper
parsed_data[[i]] <- convert_to_list(el)
} else if (length(el) > 1) {
# Not a list, but has length more than one element == vector
parsed_data[[i]] <- as.list(parsed_data[[i]])
}
# In other cases, continue looping
}
}
parsed_data <- convert_to_list(parsed_data)
View(parsed_data)
convert_to_list <- function(parsed_data) {
print("Function start")
for (i in seq_along(parsed_data)) {
print(paste("Access element:", i))
el <- parsed_data[[i]]
if (is.list(el)) {
# Recurse deeper
print(paste("Element", i, "is list, recursing"))
parsed_data[[i]] <- convert_to_list(el)
} else if (length(el) > 1) {
print(paste("Element", i, "is vector, making list"))
# Not a list, but has length more than one element == vector
parsed_data[[i]] <- as.list(parsed_data[[i]])
}
# In other cases, continue looping
}
}
parsed_data <- convert_to_list(parsed_data)
View(parsed_data)
convert_to_list <- function(parsed_data) {
print("Function start")
for (i in seq_along(parsed_data)) {
print(paste("Access element:", i))
el <- parsed_data[[i]]
if (is.list(el)) {
# Recurse deeper
print(paste("Element", i, "is list, recursing"))
parsed_data[[i]] <- convert_to_list(el)
} else if (length(el) > 1) {
print(paste("Element", i, "is vector, making list"))
# Not a list, but has length more than one element == vector
parsed_data[[i]] <- as.list(parsed_data[[i]])
break
}
# In other cases, continue looping
}
}
parsed_data <- convert_to_list(parsed_data)
convert_to_list <- function(parsed_data) {
print("Function start")
for (i in seq_along(parsed_data)) {
print(paste("Access element:", i))
el <- parsed_data[[i]]
if (is.list(el)) {
# Recurse deeper
print(paste("Element", i, "is list, recursing"))
parsed_data[[i]] <- convert_to_list(el)
print(paste("Returned from recursion"))
} else if (length(el) > 1) {
print(paste("Element", i, "is vector, making list"))
# Not a list, but has length more than one element == vector
parsed_data[[i]] <- as.list(parsed_data[[i]])
break
}
# In other cases, continue looping
}
}
parsed_data <- convert_to_list(parsed_data)
parsed_data[[1]]
dim(parsed_data)
dim(parsed_data[[1]])
convert_to_list <- function(parsed_data) {
print("Function start")
for (i in seq_along(parsed_data)) {
print(paste("Access element:", i))
el <- parsed_data[[i]]
if (is.list(el)) {
# Recurse deeper
print(paste("Element", i, "is list, recursing"))
parsed_data[[i]] <- convert_to_list(el)
print(paste("Returned from recursion"))
} else if (length(el) > 1) {
print(paste("Element", i, "is vector, making list"))
# Not a list, but has length more than one element == vector
parsed_data[[i]] <- as.list(parsed_data[[i]])
break
}
# In other cases, continue looping
}
return(parsed_data)
}
parsed_data <- convert_to_list(parsed_data)
mark_quoted <- function(parsed_data, quoted_lines) {
# Recursively go through elements in parsed_data and set their "quoted"
# status to the matching values in quoted_lines
for (i in seq_along(parsed_data)) {
el <- parsed_data[[i]]
if (is.list(el) || (is.character(el) && length(el) > 1)) {
# Recurse into sub-list
parsed_data[[i]] <- mark_quoted(el, quoted_lines)
} else {
# Set the attribute for vector elements
attr(parsed_data[[i]], "quoted") <- quoted_lines[i]
}
}
return(parsed_data)
}
parsed_data <- mark_quoted(parsed_data, quoted_lines)
View(parsed_data)
lines
quoted_lines
is_quoted <- function(line){grepl("^\\s*(?:[^:]+:\\s*[\"'].*[\"']|-+\\s*([\"']).*\\1)\\s*$"
, line)}
quoted_lines <- sapply(lines, is_quoted)
# The output needs to be cleaned from nested maps and empty lines
for (el in names(quoted_lines)) {
# Drop empty lines
if (grepl("^\\s*$", el)) {
quoted_lines <- quoted_lines[!(names(quoted_lines) %in% el)]
}
# Drop lines that end in a colon (indicating a nested map)
if (grepl(".*:$", el)) {
quoted_lines <- quoted_lines[!(names(quoted_lines) %in% el)]
}
}
convert_to_list <- function(parsed_data) {
print("Function start")
for (i in seq_along(parsed_data)) {
print(paste("Access element:", i))
el <- parsed_data[[i]]
if (is.list(el)) {
# Recurse deeper
print(paste("Element", i, "is list, recursing"))
parsed_data[[i]] <- convert_to_list(el)
print(paste("Returned from recursion"))
} else if (length(el) > 1) {
print(paste("Element", i, "is vector, making list"))
# Not a list, but has length more than one element == vector
parsed_data[[i]] <- as.list(parsed_data[[i]])
break
}
# In other cases, continue looping
}
return(parsed_data)
}
# Parse the data as YAML and convert unnamed atomic vectors to lists
parsed_data <- yaml::yaml.load(lines)
parsed_data <- convert_to_list(parsed_data)
mark_quoted <- function(parsed_data, quoted_lines) {
# Recursively go through elements in parsed_data and set their "quoted"
# status to the matching values in quoted_lines
for (i in seq_along(parsed_data)) {
el <- parsed_data[[i]]
if (is.list(el) || (is.character(el) && length(el) > 1)) {
# Recurse into sub-list
parsed_data[[i]] <- mark_quoted(el, quoted_lines)
} else {
# Set the attribute for vector elements
attr(parsed_data[[i]], "quoted") <- quoted_lines[i]
}
}
return(parsed_data)
}
# Mark "quoted" attributes
parsed_data <- mark_quoted(parsed_data, quoted_lines)
quoted_lines
source("~/Documents/Coding/quartonperusteet/R/_helpers.R", echo=TRUE)
quarto_file <- "_quarto.yml"
quarto_data <- parse_yaml_with_quotes(quarto_file)
# Load the chapters.yml file
chapters_file <- "_chapters.yml"
chapters_data <- parse_yaml_with_quotes(chapters_file)
View(chapters_data)
# Ensure "book" exists in _quarto.yml
if (!"book" %in% names(quarto_data)) {
quarto_data$book <- list()
}
# Retain `index.qmd` if it exists in the current chapters
existing_chapters <- quarto_data$book$chapters
if (!is.null(existing_chapters) && "index.qmd" %in% existing_chapters) {
index <- list("index.qmd")
} else {
index <- list()
}
# Merge `index.qmd` with new chapters from chapters.yml
new_chapters <- chapters_data$chapters
quarto_data$book$chapters <- c(index, new_chapters)
# Add appendices if they exist in chapters.yml
if ("appendices" %in% names(chapters_data)) {
quarto_data$book$appendices <- chapters_data$appendices
}
# Write the updated data back to _quarto.yml
write_yaml(quarto_data, "test.yml")
write_yaml_with_quotes(quarto_data, "test.yml")
View(new_chapters)
View(quarto_data)
attr(quarto_data$project$type, which = "quoted")
write_yaml_with_quotes <- function(data, file) {
writeLines(
yaml::as.yaml(
data,
handlers = list(
logical = yaml::verbatim_logical
)
),
con = file
)
}
write_yaml_with_quotes(quarto_data, "test.yml")
?yaml::write_yaml
port_def <- "80:80"
attr(port_def, "quoted") <- TRUE
x <- list(ports = list(port_def))
as.yaml(x)
port_def <- "80:80"
attr(port_def, "quoted") <- TRUE
x <- list(ports = list(port_def))
yaml::as.yaml(x)
yaml::write_yaml(quarto_data, "test.yml")
class(quarto_data$project$type) <- "verbatim"
yaml::write_yaml(quarto_data, "test.yml")
View(quarto_data)
### Ensure that R/_helpers.R is sourced first, as it provides some functions
source("R/_helpers.R")
# Load the _quarto.yml file
quarto_file <- "_quarto.yml"
quarto_data <- parse_yaml_with_quotes(quarto_file)
# Load the chapters.yml file
chapters_file <- "_chapters.yml"
chapters_data <- parse_yaml_with_quotes(chapters_file)
# Ensure "book" exists in _quarto.yml
if (!"book" %in% names(quarto_data)) {
quarto_data$book <- list()
}
# Retain `index.qmd` if it exists in the current chapters
existing_chapters <- quarto_data$book$chapters
if (!is.null(existing_chapters) && "index.qmd" %in% existing_chapters) {
index <- list("index.qmd")
} else {
index <- list()
}
# Merge `index.qmd` with new chapters from chapters.yml
new_chapters <- chapters_data$chapters
quarto_data$book$chapters <- c(index, new_chapters)
# Add appendices if they exist in chapters.yml
if ("appendices" %in% names(chapters_data)) {
quarto_data$book$appendices <- chapters_data$appendices
}
attributes(quarto_data)
attributes(quarto_data$project)
attributes(quarto_data$project$type)
attributes(quarto_data$project$output-dir)
attributes(quarto_data$project$`output-dir`)
attributes(quarto_data$project$`pre-render`)
yaml::write_yaml(quarto_data, "test.yml")
write_yaml_with_quotes(quarto_data, "test.yml")
names(chapters_data)
View(chapters_data)
View(parse_yaml_with_quotes)
source("R/_helpers.R")
chapters_file <- "_chapters.yml"
lines <- readLines(chapters_file)
is_quoted <- function(line){grepl("^\\s*(?:[^:]+:\\s*[\"'].*[\"']|-+\\s*([\"']).*\\1)\\s*$"
, line)}
quoted_lines <- sapply(lines, is_quoted)
quoted_lines
for (el in names(quoted_lines)) {
# Drop empty lines
if (grepl("^\\s*$", el)) {
quoted_lines <- quoted_lines[!(names(quoted_lines) %in% el)]
}
# Drop lines that end in a colon (indicating a nested map)
if (grepl(".*:$", el)) {
quoted_lines <- quoted_lines[!(names(quoted_lines) %in% el)]
}
}
quoted_lines
convert_to_list <- function(parsed_data) {
print("Function start")
for (i in seq_along(parsed_data)) {
print(paste("Access element:", i))
el <- parsed_data[[i]]
if (is.list(el)) {
# Recurse deeper
print(paste("Element", i, "is list, recursing"))
parsed_data[[i]] <- convert_to_list(el)
print(paste("Returned from recursion"))
} else if (length(el) > 1) {
print(paste("Element", i, "is vector, making list"))
# Not a list, but has length more than one element == vector
parsed_data[[i]] <- as.list(parsed_data[[i]])
break
}
# In other cases, continue looping
}
return(parsed_data)
}
parsed_data <- yaml::yaml.load(lines)
parsed_data <- convert_to_list(parsed_data)
View(parsed_data)
mark_quoted <- function(parsed_data, quoted_lines, iter = 1) {
# Recursively go through elements in parsed_data and set their "quoted"
# status to the matching values in quoted_lines
iter <- iter
print(paste("Started iteration", iter))
for (i in seq_along(parsed_data)) {
print(paste("In loop, element", i))
el <- parsed_data[[i]]
if (is.list(el) || (is.character(el) && length(el) > 1)) {
# Recurse into sub-list
print("Element is list or vector, entering recursion")
parsed_data[[i]] <- mark_quoted(el, quoted_lines, iter)
} else {
# Set the attribute for vector elements
print(paste("Element is scalar, marking quotation status for", iter))
attr(parsed_data[[i]], "quoted") <- quoted_lines[iter]
}
}
return(parsed_data)
}
parsed_data <- mark_quoted(parsed_data, quoted_lines)
mark_quoted <- function(parsed_data, quoted_lines, iter = 1) {
# Recursively go through elements in parsed_data and set their "quoted"
# status to the matching values in quoted_lines
iter <- iter
print(paste("Started iteration", iter))
for (i in seq_along(parsed_data)) {
print(paste("In loop, element", i))
el <- parsed_data[[i]]
if (is.list(el) || (is.character(el) && length(el) > 1)) {
# Recurse into sub-list
print("Element is list or vector, entering recursion")
parsed_data[[i]] <- mark_quoted(el, quoted_lines, iter)
} else {
# Set the attribute for vector elements
print(paste("Element is scalar, marking quotation status for", iter))
attr(parsed_data[[i]], "quoted") <- quoted_lines[iter]
iter <- iter + 1
}
}
return(parsed_data)
}
parsed_data <- mark_quoted(parsed_data, quoted_lines)
View(parsed_data)
mark_quoted <- function(parsed_data, quoted_lines, iter = 1) {
# Recursively go through elements in parsed_data and set their "quoted"
# status to the matching values in quoted_lines
iter <- iter
print(paste("Modifying for quoted_lines element", iter))
for (i in seq_along(parsed_data)) {
print(paste("In loop, element", i))
el <- parsed_data[[i]]
if (is.list(el) || (is.character(el) && length(el) > 1)) {
# Recurse into sub-list
print("Element is list or vector, entering recursion")
parsed_data[[i]] <- mark_quoted(el, quoted_lines, iter)
} else {
# Set the attribute for vector elements
print(paste("Element is scalar, marking quotation status for quoted_lines", iter))
attr(parsed_data[[i]], "quoted") <- quoted_lines[iter]
iter <- iter + 1
}
}
return(parsed_data)
}
parsed_data <- mark_quoted(parsed_data, quoted_lines)
mark_quoted <- function(parsed_data, quoted_lines, iter = 1) {
# Recursively go through elements in parsed_data and set their "quoted"
# status to the matching values in quoted_lines
iter <- iter
print(paste("Modifying for quoted_lines element", iter))
for (i in seq_along(parsed_data)) {
print(paste("In loop, parsed_data element", i))
el <- parsed_data[[i]]
if (is.list(el) || (is.character(el) && length(el) > 1)) {
# Recurse into sub-list
print("Element is list or vector, entering recursion")
parsed_data[[i]] <- mark_quoted(el, quoted_lines, iter)
} else {
# Set the attribute for vector elements
print(paste("Element is scalar, marking quotation status for quoted_lines", iter))
attr(parsed_data[[i]], "quoted") <- quoted_lines[iter]
iter <- iter + 1
}
}
parsed_data <- mark_quoted(parsed_data, quoted_lines)
parsed_data <- mark_quoted(parsed_data, quoted_lines)
mark_quoted <- function(parsed_data, quoted_lines, iter = 1) {
# Recursively go through elements in parsed_data and set their "quoted"
# status to the matching values in quoted_lines
iter <- iter
print(paste("Modifying for quoted_lines element", iter))
for (i in seq_along(parsed_data)) {
print(paste("In loop, parsed_data element", i))
el <- parsed_data[[i]]
if (is.list(el) || (is.character(el) && length(el) > 1)) {
# Recurse into sub-list
print("Element is list or vector, entering recursion")
parsed_data[[i]] <- mark_quoted(el, quoted_lines, iter)
} else {
# Set the attribute for vector elements
print(paste("Element is scalar, marking quotation status for quoted_lines", iter))
attr(parsed_data[[i]], "quoted") <- quoted_lines[iter]
iter <- iter + 1
}
}
return(parsed_data)
}
parsed_data <- mark_quoted(parsed_data, quoted_lines)
mark_quoted <- function(parsed_data, quoted_lines, iter = 1) {
# Recursively go through elements in parsed_data and set their "quoted"
# status to the matching values in quoted_lines
iter <- iter
print(paste("Modifying for quoted_lines element", iter))
for (i in seq_along(parsed_data)) {
print(paste("In loop, parsed_data element", i))
el <- parsed_data[[i]]
if (is.list(el) || (is.character(el) && length(el) > 1)) {
# Recurse into sub-list
print("Element is list or vector, entering recursion")
parsed_data[[i]] <- mark_quoted(el, quoted_lines, iter)
print("Exited recursion")
} else {
# Set the attribute for vector elements
print(paste("Element is scalar, marking quotation status for quoted_lines", iter))
attr(parsed_data[[i]], "quoted") <- quoted_lines[iter]
iter <- iter + 1
}
}
return(parsed_data)
}
parsed_data <- mark_quoted(parsed_data, quoted_lines)
View(parsed_data)
mark_quoted <- function(parsed_data, quoted_lines, iter = 1) {
# Recursively go through elements in parsed_data and set their "quoted"
# status to the matching values in quoted_lines
iter <- iter
print(paste("Modifying for quoted_lines element", iter))
for (i in seq_along(parsed_data)) {
print(paste("In loop, parsed_data element", i))
el <- parsed_data[[i]]
if (is.list(el) || (is.character(el) && length(el) > 1)) {
# Recurse into sub-list
print("Element is list or vector, entering recursion")
parsed_data[[i]] <- mark_quoted(el, quoted_lines, iter = iter)
print("Exited recursion")
} else {
# Set the attribute for vector elements
print(paste("Element is scalar, marking quotation status for quoted_lines", iter))
attr(parsed_data[[i]], "quoted") <- quoted_lines[iter]
iter <- iter + 1
}
}
return(parsed_data)
}
parsed_data <- mark_quoted(parsed_data, quoted_lines)
mark_quoted <- function(parsed_data, quoted_lines, iter = 1) {
# Recursively go through elements in parsed_data and set their "quoted"
# status to the matching values in quoted_lines
it <- iter
print(paste("Modifying for quoted_lines element", it))
for (i in seq_along(parsed_data)) {
print(paste("In loop, parsed_data element", i))
el <- parsed_data[[i]]
if (is.list(el) || (is.character(el) && length(el) > 1)) {
# Recurse into sub-list
print("Element is list or vector, entering recursion")
parsed_data[[i]] <- mark_quoted(el, quoted_lines, iter = it)
print("Exited recursion")
} else {
# Set the attribute for vector elements
print(paste("Element is scalar, marking quotation status for quoted_lines", it))
attr(parsed_data[[i]], "quoted") <- quoted_lines[it]
it <- it + 1
}
}
return(parsed_data)
}
parsed_data <- mark_quoted(parsed_data, quoted_lines)
